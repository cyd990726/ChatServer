// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friend_repo_service.proto

#include "friend_repo_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_common_2eproto;
namespace fixbug {
class InsertFriendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertFriendRequest> _instance;
} _InsertFriendRequest_default_instance_;
class InsertFriendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertFriendResponse> _instance;
} _InsertFriendResponse_default_instance_;
class queryFriendsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryFriendsRequest> _instance;
} _queryFriendsRequest_default_instance_;
class queryFriendsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryFriendsResponse> _instance;
} _queryFriendsResponse_default_instance_;
}  // namespace fixbug
static void InitDefaultsscc_info_InsertFriendRequest_friend_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_InsertFriendRequest_default_instance_;
    new (ptr) ::fixbug::InsertFriendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::InsertFriendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsertFriendRequest_friend_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InsertFriendRequest_friend_5frepo_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_InsertFriendResponse_friend_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_InsertFriendResponse_default_instance_;
    new (ptr) ::fixbug::InsertFriendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::InsertFriendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertFriendResponse_friend_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertFriendResponse_friend_5frepo_5fservice_2eproto}, {
      &scc_info_ResultCode_common_2eproto.base,}};

static void InitDefaultsscc_info_queryFriendsRequest_friend_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_queryFriendsRequest_default_instance_;
    new (ptr) ::fixbug::queryFriendsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::queryFriendsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryFriendsRequest_friend_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryFriendsRequest_friend_5frepo_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_queryFriendsResponse_friend_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_queryFriendsResponse_default_instance_;
    new (ptr) ::fixbug::queryFriendsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::queryFriendsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_queryFriendsResponse_friend_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_queryFriendsResponse_friend_5frepo_5fservice_2eproto}, {
      &scc_info_ResultCode_common_2eproto.base,
      &scc_info_User_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_friend_5frepo_5fservice_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_friend_5frepo_5fservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_friend_5frepo_5fservice_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_friend_5frepo_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertFriendRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertFriendRequest, friendid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertFriendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertFriendResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::queryFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::queryFriendsRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::queryFriendsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::queryFriendsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::fixbug::queryFriendsResponse, friends_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fixbug::InsertFriendRequest)},
  { 7, -1, sizeof(::fixbug::InsertFriendResponse)},
  { 13, -1, sizeof(::fixbug::queryFriendsRequest)},
  { 19, -1, sizeof(::fixbug::queryFriendsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_InsertFriendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_InsertFriendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_queryFriendsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_queryFriendsResponse_default_instance_),
};

const char descriptor_table_protodef_friend_5frepo_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031friend_repo_service.proto\022\006fixbug\032\014com"
  "mon.proto\"7\n\023InsertFriendRequest\022\016\n\006user"
  "id\030\001 \001(\r\022\020\n\010friendid\030\002 \001(\r\":\n\024InsertFrie"
  "ndResponse\022\"\n\006result\030\001 \001(\0132\022.fixbug.Resu"
  "ltCode\"%\n\023queryFriendsRequest\022\016\n\006userid\030"
  "\001 \001(\r\"Y\n\024queryFriendsResponse\022\"\n\006result\030"
  "\001 \001(\0132\022.fixbug.ResultCode\022\035\n\007friends\030\002 \003"
  "(\0132\014.fixbug.User2\227\001\n\014friend_model\022C\n\006ins"
  "ert\022\033.fixbug.InsertFriendRequest\032\034.fixbu"
  "g.InsertFriendResponse\022B\n\005query\022\033.fixbug"
  ".queryFriendsRequest\032\034.fixbug.queryFrien"
  "dsResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_friend_5frepo_5fservice_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_friend_5frepo_5fservice_2eproto_sccs[4] = {
  &scc_info_InsertFriendRequest_friend_5frepo_5fservice_2eproto.base,
  &scc_info_InsertFriendResponse_friend_5frepo_5fservice_2eproto.base,
  &scc_info_queryFriendsRequest_friend_5frepo_5fservice_2eproto.base,
  &scc_info_queryFriendsResponse_friend_5frepo_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_friend_5frepo_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friend_5frepo_5fservice_2eproto = {
  false, false, descriptor_table_protodef_friend_5frepo_5fservice_2eproto, "friend_repo_service.proto", 463,
  &descriptor_table_friend_5frepo_5fservice_2eproto_once, descriptor_table_friend_5frepo_5fservice_2eproto_sccs, descriptor_table_friend_5frepo_5fservice_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_friend_5frepo_5fservice_2eproto::offsets,
  file_level_metadata_friend_5frepo_5fservice_2eproto, 4, file_level_enum_descriptors_friend_5frepo_5fservice_2eproto, file_level_service_descriptors_friend_5frepo_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_friend_5frepo_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_friend_5frepo_5fservice_2eproto)), true);
namespace fixbug {

// ===================================================================

void InsertFriendRequest::InitAsDefaultInstance() {
}
class InsertFriendRequest::_Internal {
 public:
};

InsertFriendRequest::InsertFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.InsertFriendRequest)
}
InsertFriendRequest::InsertFriendRequest(const InsertFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&friendid_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(friendid_));
  // @@protoc_insertion_point(copy_constructor:fixbug.InsertFriendRequest)
}

void InsertFriendRequest::SharedCtor() {
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friendid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(friendid_));
}

InsertFriendRequest::~InsertFriendRequest() {
  // @@protoc_insertion_point(destructor:fixbug.InsertFriendRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertFriendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InsertFriendRequest::ArenaDtor(void* object) {
  InsertFriendRequest* _this = reinterpret_cast< InsertFriendRequest* >(object);
  (void)_this;
}
void InsertFriendRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertFriendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertFriendRequest& InsertFriendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertFriendRequest_friend_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.InsertFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friendid_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(friendid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertFriendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 friendid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          friendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertFriendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.InsertFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  // uint32 friendid = 2;
  if (this->friendid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_friendid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.InsertFriendRequest)
  return target;
}

size_t InsertFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.InsertFriendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  // uint32 friendid = 2;
  if (this->friendid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_friendid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertFriendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.InsertFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertFriendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertFriendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.InsertFriendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.InsertFriendRequest)
    MergeFrom(*source);
  }
}

void InsertFriendRequest::MergeFrom(const InsertFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.InsertFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.friendid() != 0) {
    _internal_set_friendid(from._internal_friendid());
  }
}

void InsertFriendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.InsertFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertFriendRequest::CopyFrom(const InsertFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.InsertFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertFriendRequest::IsInitialized() const {
  return true;
}

void InsertFriendRequest::InternalSwap(InsertFriendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertFriendRequest, friendid_)
      + sizeof(InsertFriendRequest::friendid_)
      - PROTOBUF_FIELD_OFFSET(InsertFriendRequest, userid_)>(
          reinterpret_cast<char*>(&userid_),
          reinterpret_cast<char*>(&other->userid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertFriendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsertFriendResponse::InitAsDefaultInstance() {
  ::fixbug::_InsertFriendResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::fixbug::ResultCode*>(
      ::fixbug::ResultCode::internal_default_instance());
}
class InsertFriendResponse::_Internal {
 public:
  static const ::fixbug::ResultCode& result(const InsertFriendResponse* msg);
};

const ::fixbug::ResultCode&
InsertFriendResponse::_Internal::result(const InsertFriendResponse* msg) {
  return *msg->result_;
}
void InsertFriendResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
InsertFriendResponse::InsertFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.InsertFriendResponse)
}
InsertFriendResponse::InsertFriendResponse(const InsertFriendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::fixbug::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.InsertFriendResponse)
}

void InsertFriendResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertFriendResponse_friend_5frepo_5fservice_2eproto.base);
  result_ = nullptr;
}

InsertFriendResponse::~InsertFriendResponse() {
  // @@protoc_insertion_point(destructor:fixbug.InsertFriendResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertFriendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void InsertFriendResponse::ArenaDtor(void* object) {
  InsertFriendResponse* _this = reinterpret_cast< InsertFriendResponse* >(object);
  (void)_this;
}
void InsertFriendResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertFriendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertFriendResponse& InsertFriendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertFriendResponse_friend_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertFriendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.InsertFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertFriendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertFriendResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.InsertFriendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.InsertFriendResponse)
  return target;
}

size_t InsertFriendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.InsertFriendResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertFriendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.InsertFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertFriendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertFriendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.InsertFriendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.InsertFriendResponse)
    MergeFrom(*source);
  }
}

void InsertFriendResponse::MergeFrom(const InsertFriendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.InsertFriendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::fixbug::ResultCode::MergeFrom(from._internal_result());
  }
}

void InsertFriendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.InsertFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertFriendResponse::CopyFrom(const InsertFriendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.InsertFriendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertFriendResponse::IsInitialized() const {
  return true;
}

void InsertFriendResponse::InternalSwap(InsertFriendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertFriendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryFriendsRequest::InitAsDefaultInstance() {
}
class queryFriendsRequest::_Internal {
 public:
};

queryFriendsRequest::queryFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.queryFriendsRequest)
}
queryFriendsRequest::queryFriendsRequest(const queryFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:fixbug.queryFriendsRequest)
}

void queryFriendsRequest::SharedCtor() {
  userid_ = 0u;
}

queryFriendsRequest::~queryFriendsRequest() {
  // @@protoc_insertion_point(destructor:fixbug.queryFriendsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void queryFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void queryFriendsRequest::ArenaDtor(void* object) {
  queryFriendsRequest* _this = reinterpret_cast< queryFriendsRequest* >(object);
  (void)_this;
}
void queryFriendsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryFriendsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryFriendsRequest& queryFriendsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryFriendsRequest_friend_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void queryFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.queryFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryFriendsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryFriendsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.queryFriendsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.queryFriendsRequest)
  return target;
}

size_t queryFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.queryFriendsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryFriendsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.queryFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const queryFriendsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryFriendsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.queryFriendsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.queryFriendsRequest)
    MergeFrom(*source);
  }
}

void queryFriendsRequest::MergeFrom(const queryFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.queryFriendsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void queryFriendsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.queryFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryFriendsRequest::CopyFrom(const queryFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.queryFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryFriendsRequest::IsInitialized() const {
  return true;
}

void queryFriendsRequest::InternalSwap(queryFriendsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata queryFriendsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryFriendsResponse::InitAsDefaultInstance() {
  ::fixbug::_queryFriendsResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::fixbug::ResultCode*>(
      ::fixbug::ResultCode::internal_default_instance());
}
class queryFriendsResponse::_Internal {
 public:
  static const ::fixbug::ResultCode& result(const queryFriendsResponse* msg);
};

const ::fixbug::ResultCode&
queryFriendsResponse::_Internal::result(const queryFriendsResponse* msg) {
  return *msg->result_;
}
void queryFriendsResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
void queryFriendsResponse::clear_friends() {
  friends_.Clear();
}
queryFriendsResponse::queryFriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.queryFriendsResponse)
}
queryFriendsResponse::queryFriendsResponse(const queryFriendsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::fixbug::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.queryFriendsResponse)
}

void queryFriendsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryFriendsResponse_friend_5frepo_5fservice_2eproto.base);
  result_ = nullptr;
}

queryFriendsResponse::~queryFriendsResponse() {
  // @@protoc_insertion_point(destructor:fixbug.queryFriendsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void queryFriendsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void queryFriendsResponse::ArenaDtor(void* object) {
  queryFriendsResponse* _this = reinterpret_cast< queryFriendsResponse* >(object);
  (void)_this;
}
void queryFriendsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryFriendsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryFriendsResponse& queryFriendsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryFriendsResponse_friend_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void queryFriendsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.queryFriendsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryFriendsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fixbug.User friends = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryFriendsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.queryFriendsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // repeated .fixbug.User friends = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.queryFriendsResponse)
  return target;
}

size_t queryFriendsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.queryFriendsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fixbug.User friends = 2;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryFriendsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.queryFriendsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const queryFriendsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryFriendsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.queryFriendsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.queryFriendsResponse)
    MergeFrom(*source);
  }
}

void queryFriendsResponse::MergeFrom(const queryFriendsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.queryFriendsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.has_result()) {
    _internal_mutable_result()->::fixbug::ResultCode::MergeFrom(from._internal_result());
  }
}

void queryFriendsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.queryFriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryFriendsResponse::CopyFrom(const queryFriendsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.queryFriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryFriendsResponse::IsInitialized() const {
  return true;
}

void queryFriendsResponse::InternalSwap(queryFriendsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata queryFriendsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

friend_model::~friend_model() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* friend_model::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_friend_5frepo_5fservice_2eproto);
  return file_level_service_descriptors_friend_5frepo_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* friend_model::GetDescriptor() {
  return descriptor();
}

void friend_model::insert(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::InsertFriendRequest*,
                         ::fixbug::InsertFriendResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method insert() not implemented.");
  done->Run();
}

void friend_model::query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::queryFriendsRequest*,
                         ::fixbug::queryFriendsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method query() not implemented.");
  done->Run();
}

void friend_model::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_friend_5frepo_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      insert(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::InsertFriendRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::InsertFriendResponse*>(
                 response),
             done);
      break;
    case 1:
      query(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::queryFriendsRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::queryFriendsResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& friend_model::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::InsertFriendRequest::default_instance();
    case 1:
      return ::fixbug::queryFriendsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& friend_model::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::InsertFriendResponse::default_instance();
    case 1:
      return ::fixbug::queryFriendsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

friend_model_Stub::friend_model_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
friend_model_Stub::friend_model_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
friend_model_Stub::~friend_model_Stub() {
  if (owns_channel_) delete channel_;
}

void friend_model_Stub::insert(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::InsertFriendRequest* request,
                              ::fixbug::InsertFriendResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void friend_model_Stub::query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::queryFriendsRequest* request,
                              ::fixbug::queryFriendsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fixbug::InsertFriendRequest* Arena::CreateMaybeMessage< ::fixbug::InsertFriendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::InsertFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::InsertFriendResponse* Arena::CreateMaybeMessage< ::fixbug::InsertFriendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::InsertFriendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::queryFriendsRequest* Arena::CreateMaybeMessage< ::fixbug::queryFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::queryFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::queryFriendsResponse* Arena::CreateMaybeMessage< ::fixbug::queryFriendsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::queryFriendsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
