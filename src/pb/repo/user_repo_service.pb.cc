// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_repo_service.proto

#include "user_repo_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_common_2eproto;
namespace fixbug {
class InsertUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertUserRequest> _instance;
} _InsertUserRequest_default_instance_;
class InsertUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertUserResponse> _instance;
} _InsertUserResponse_default_instance_;
class queryUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryUserRequest> _instance;
} _queryUserRequest_default_instance_;
class queryUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<queryUserResponse> _instance;
} _queryUserResponse_default_instance_;
class UpdateStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateStateRequest> _instance;
} _UpdateStateRequest_default_instance_;
class UpdateStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateStateResponse> _instance;
} _UpdateStateResponse_default_instance_;
class ResetStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetStateRequest> _instance;
} _ResetStateRequest_default_instance_;
class ResetStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetStateResponse> _instance;
} _ResetStateResponse_default_instance_;
}  // namespace fixbug
static void InitDefaultsscc_info_InsertUserRequest_user_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_InsertUserRequest_default_instance_;
    new (ptr) ::fixbug::InsertUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::InsertUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertUserRequest_user_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertUserRequest_user_5frepo_5fservice_2eproto}, {
      &scc_info_User_common_2eproto.base,}};

static void InitDefaultsscc_info_InsertUserResponse_user_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_InsertUserResponse_default_instance_;
    new (ptr) ::fixbug::InsertUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::InsertUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InsertUserResponse_user_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InsertUserResponse_user_5frepo_5fservice_2eproto}, {
      &scc_info_ResultCode_common_2eproto.base,}};

static void InitDefaultsscc_info_ResetStateRequest_user_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_ResetStateRequest_default_instance_;
    new (ptr) ::fixbug::ResetStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::ResetStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetStateRequest_user_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetStateRequest_user_5frepo_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ResetStateResponse_user_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_ResetStateResponse_default_instance_;
    new (ptr) ::fixbug::ResetStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::ResetStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResetStateResponse_user_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResetStateResponse_user_5frepo_5fservice_2eproto}, {
      &scc_info_ResultCode_common_2eproto.base,}};

static void InitDefaultsscc_info_UpdateStateRequest_user_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_UpdateStateRequest_default_instance_;
    new (ptr) ::fixbug::UpdateStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::UpdateStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateStateRequest_user_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateStateRequest_user_5frepo_5fservice_2eproto}, {
      &scc_info_User_common_2eproto.base,}};

static void InitDefaultsscc_info_UpdateStateResponse_user_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_UpdateStateResponse_default_instance_;
    new (ptr) ::fixbug::UpdateStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::UpdateStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateStateResponse_user_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateStateResponse_user_5frepo_5fservice_2eproto}, {
      &scc_info_ResultCode_common_2eproto.base,}};

static void InitDefaultsscc_info_queryUserRequest_user_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_queryUserRequest_default_instance_;
    new (ptr) ::fixbug::queryUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::queryUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_queryUserRequest_user_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_queryUserRequest_user_5frepo_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_queryUserResponse_user_5frepo_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fixbug::_queryUserResponse_default_instance_;
    new (ptr) ::fixbug::queryUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fixbug::queryUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_queryUserResponse_user_5frepo_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_queryUserResponse_user_5frepo_5fservice_2eproto}, {
      &scc_info_ResultCode_common_2eproto.base,
      &scc_info_User_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_5frepo_5fservice_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_user_5frepo_5fservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_user_5frepo_5fservice_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_user_5frepo_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::InsertUserResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::queryUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::queryUserRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::queryUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::queryUserResponse, result_),
  PROTOBUF_FIELD_OFFSET(::fixbug::queryUserResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::UpdateStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::UpdateStateRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::UpdateStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::UpdateStateResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::ResetStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::ResetStateRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fixbug::ResetStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fixbug::ResetStateResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fixbug::InsertUserRequest)},
  { 6, -1, sizeof(::fixbug::InsertUserResponse)},
  { 12, -1, sizeof(::fixbug::queryUserRequest)},
  { 18, -1, sizeof(::fixbug::queryUserResponse)},
  { 25, -1, sizeof(::fixbug::UpdateStateRequest)},
  { 31, -1, sizeof(::fixbug::UpdateStateResponse)},
  { 37, -1, sizeof(::fixbug::ResetStateRequest)},
  { 43, -1, sizeof(::fixbug::ResetStateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_InsertUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_InsertUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_queryUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_queryUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_UpdateStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_UpdateStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_ResetStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fixbug::_ResetStateResponse_default_instance_),
};

const char descriptor_table_protodef_user_5frepo_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027user_repo_service.proto\022\006fixbug\032\014commo"
  "n.proto\"/\n\021InsertUserRequest\022\032\n\004user\030\001 \001"
  "(\0132\014.fixbug.User\"8\n\022InsertUserResponse\022\""
  "\n\006result\030\001 \001(\0132\022.fixbug.ResultCode\"\"\n\020qu"
  "eryUserRequest\022\016\n\006userid\030\001 \001(\r\"S\n\021queryU"
  "serResponse\022\"\n\006result\030\001 \001(\0132\022.fixbug.Res"
  "ultCode\022\032\n\004user\030\002 \001(\0132\014.fixbug.User\"0\n\022U"
  "pdateStateRequest\022\032\n\004user\030\001 \001(\0132\014.fixbug"
  ".User\"9\n\023UpdateStateResponse\022\"\n\006result\030\001"
  " \001(\0132\022.fixbug.ResultCode\"#\n\021ResetStateRe"
  "quest\022\016\n\006userid\030\001 \001(\r\"8\n\022ResetStateRespo"
  "nse\022\"\n\006result\030\001 \001(\0132\022.fixbug.ResultCode2"
  "\230\002\n\nuser_model\022\?\n\006insert\022\031.fixbug.Insert"
  "UserRequest\032\032.fixbug.InsertUserResponse\022"
  "<\n\005query\022\030.fixbug.queryUserRequest\032\031.fix"
  "bug.queryUserResponse\022F\n\013updateState\022\032.f"
  "ixbug.UpdateStateRequest\032\033.fixbug.Update"
  "StateResponse\022C\n\nresetState\022\031.fixbug.Res"
  "etStateRequest\032\032.fixbug.ResetStateRespon"
  "seB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_user_5frepo_5fservice_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_user_5frepo_5fservice_2eproto_sccs[8] = {
  &scc_info_InsertUserRequest_user_5frepo_5fservice_2eproto.base,
  &scc_info_InsertUserResponse_user_5frepo_5fservice_2eproto.base,
  &scc_info_ResetStateRequest_user_5frepo_5fservice_2eproto.base,
  &scc_info_ResetStateResponse_user_5frepo_5fservice_2eproto.base,
  &scc_info_UpdateStateRequest_user_5frepo_5fservice_2eproto.base,
  &scc_info_UpdateStateResponse_user_5frepo_5fservice_2eproto.base,
  &scc_info_queryUserRequest_user_5frepo_5fservice_2eproto.base,
  &scc_info_queryUserResponse_user_5frepo_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_5frepo_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_5frepo_5fservice_2eproto = {
  false, false, descriptor_table_protodef_user_5frepo_5fservice_2eproto, "user_repo_service.proto", 775,
  &descriptor_table_user_5frepo_5fservice_2eproto_once, descriptor_table_user_5frepo_5fservice_2eproto_sccs, descriptor_table_user_5frepo_5fservice_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_user_5frepo_5fservice_2eproto::offsets,
  file_level_metadata_user_5frepo_5fservice_2eproto, 8, file_level_enum_descriptors_user_5frepo_5fservice_2eproto, file_level_service_descriptors_user_5frepo_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_user_5frepo_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_user_5frepo_5fservice_2eproto)), true);
namespace fixbug {

// ===================================================================

void InsertUserRequest::InitAsDefaultInstance() {
  ::fixbug::_InsertUserRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::fixbug::User*>(
      ::fixbug::User::internal_default_instance());
}
class InsertUserRequest::_Internal {
 public:
  static const ::fixbug::User& user(const InsertUserRequest* msg);
};

const ::fixbug::User&
InsertUserRequest::_Internal::user(const InsertUserRequest* msg) {
  return *msg->user_;
}
void InsertUserRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
InsertUserRequest::InsertUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.InsertUserRequest)
}
InsertUserRequest::InsertUserRequest(const InsertUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::fixbug::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.InsertUserRequest)
}

void InsertUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertUserRequest_user_5frepo_5fservice_2eproto.base);
  user_ = nullptr;
}

InsertUserRequest::~InsertUserRequest() {
  // @@protoc_insertion_point(destructor:fixbug.InsertUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void InsertUserRequest::ArenaDtor(void* object) {
  InsertUserRequest* _this = reinterpret_cast< InsertUserRequest* >(object);
  (void)_this;
}
void InsertUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertUserRequest& InsertUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertUserRequest_user_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.InsertUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.InsertUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.InsertUserRequest)
  return target;
}

size_t InsertUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.InsertUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.InsertUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.InsertUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.InsertUserRequest)
    MergeFrom(*source);
  }
}

void InsertUserRequest::MergeFrom(const InsertUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.InsertUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::fixbug::User::MergeFrom(from._internal_user());
  }
}

void InsertUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.InsertUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertUserRequest::CopyFrom(const InsertUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.InsertUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertUserRequest::IsInitialized() const {
  return true;
}

void InsertUserRequest::InternalSwap(InsertUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsertUserResponse::InitAsDefaultInstance() {
  ::fixbug::_InsertUserResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::fixbug::ResultCode*>(
      ::fixbug::ResultCode::internal_default_instance());
}
class InsertUserResponse::_Internal {
 public:
  static const ::fixbug::ResultCode& result(const InsertUserResponse* msg);
};

const ::fixbug::ResultCode&
InsertUserResponse::_Internal::result(const InsertUserResponse* msg) {
  return *msg->result_;
}
void InsertUserResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
InsertUserResponse::InsertUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.InsertUserResponse)
}
InsertUserResponse::InsertUserResponse(const InsertUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::fixbug::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.InsertUserResponse)
}

void InsertUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InsertUserResponse_user_5frepo_5fservice_2eproto.base);
  result_ = nullptr;
}

InsertUserResponse::~InsertUserResponse() {
  // @@protoc_insertion_point(destructor:fixbug.InsertUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void InsertUserResponse::ArenaDtor(void* object) {
  InsertUserResponse* _this = reinterpret_cast< InsertUserResponse* >(object);
  (void)_this;
}
void InsertUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertUserResponse& InsertUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertUserResponse_user_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void InsertUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.InsertUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.InsertUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.InsertUserResponse)
  return target;
}

size_t InsertUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.InsertUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.InsertUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.InsertUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.InsertUserResponse)
    MergeFrom(*source);
  }
}

void InsertUserResponse::MergeFrom(const InsertUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.InsertUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::fixbug::ResultCode::MergeFrom(from._internal_result());
  }
}

void InsertUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.InsertUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertUserResponse::CopyFrom(const InsertUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.InsertUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertUserResponse::IsInitialized() const {
  return true;
}

void InsertUserResponse::InternalSwap(InsertUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryUserRequest::InitAsDefaultInstance() {
}
class queryUserRequest::_Internal {
 public:
};

queryUserRequest::queryUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.queryUserRequest)
}
queryUserRequest::queryUserRequest(const queryUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:fixbug.queryUserRequest)
}

void queryUserRequest::SharedCtor() {
  userid_ = 0u;
}

queryUserRequest::~queryUserRequest() {
  // @@protoc_insertion_point(destructor:fixbug.queryUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void queryUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void queryUserRequest::ArenaDtor(void* object) {
  queryUserRequest* _this = reinterpret_cast< queryUserRequest* >(object);
  (void)_this;
}
void queryUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryUserRequest& queryUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryUserRequest_user_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void queryUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.queryUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.queryUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.queryUserRequest)
  return target;
}

size_t queryUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.queryUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.queryUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const queryUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.queryUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.queryUserRequest)
    MergeFrom(*source);
  }
}

void queryUserRequest::MergeFrom(const queryUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.queryUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void queryUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.queryUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryUserRequest::CopyFrom(const queryUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.queryUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryUserRequest::IsInitialized() const {
  return true;
}

void queryUserRequest::InternalSwap(queryUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata queryUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void queryUserResponse::InitAsDefaultInstance() {
  ::fixbug::_queryUserResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::fixbug::ResultCode*>(
      ::fixbug::ResultCode::internal_default_instance());
  ::fixbug::_queryUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::fixbug::User*>(
      ::fixbug::User::internal_default_instance());
}
class queryUserResponse::_Internal {
 public:
  static const ::fixbug::ResultCode& result(const queryUserResponse* msg);
  static const ::fixbug::User& user(const queryUserResponse* msg);
};

const ::fixbug::ResultCode&
queryUserResponse::_Internal::result(const queryUserResponse* msg) {
  return *msg->result_;
}
const ::fixbug::User&
queryUserResponse::_Internal::user(const queryUserResponse* msg) {
  return *msg->user_;
}
void queryUserResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
void queryUserResponse::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
queryUserResponse::queryUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.queryUserResponse)
}
queryUserResponse::queryUserResponse(const queryUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::fixbug::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_user()) {
    user_ = new ::fixbug::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.queryUserResponse)
}

void queryUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_queryUserResponse_user_5frepo_5fservice_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_) -
      reinterpret_cast<char*>(&result_)) + sizeof(user_));
}

queryUserResponse::~queryUserResponse() {
  // @@protoc_insertion_point(destructor:fixbug.queryUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void queryUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete user_;
}

void queryUserResponse::ArenaDtor(void* object) {
  queryUserResponse* _this = reinterpret_cast< queryUserResponse* >(object);
  (void)_this;
}
void queryUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void queryUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const queryUserResponse& queryUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_queryUserResponse_user_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void queryUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.queryUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queryUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fixbug.User user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* queryUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.queryUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .fixbug.User user = 2;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.queryUserResponse)
  return target;
}

size_t queryUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.queryUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .fixbug.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void queryUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.queryUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const queryUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<queryUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.queryUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.queryUserResponse)
    MergeFrom(*source);
  }
}

void queryUserResponse::MergeFrom(const queryUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.queryUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::fixbug::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.has_user()) {
    _internal_mutable_user()->::fixbug::User::MergeFrom(from._internal_user());
  }
}

void queryUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.queryUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryUserResponse::CopyFrom(const queryUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.queryUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryUserResponse::IsInitialized() const {
  return true;
}

void queryUserResponse::InternalSwap(queryUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(queryUserResponse, user_)
      + sizeof(queryUserResponse::user_)
      - PROTOBUF_FIELD_OFFSET(queryUserResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata queryUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateStateRequest::InitAsDefaultInstance() {
  ::fixbug::_UpdateStateRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::fixbug::User*>(
      ::fixbug::User::internal_default_instance());
}
class UpdateStateRequest::_Internal {
 public:
  static const ::fixbug::User& user(const UpdateStateRequest* msg);
};

const ::fixbug::User&
UpdateStateRequest::_Internal::user(const UpdateStateRequest* msg) {
  return *msg->user_;
}
void UpdateStateRequest::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
UpdateStateRequest::UpdateStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.UpdateStateRequest)
}
UpdateStateRequest::UpdateStateRequest(const UpdateStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::fixbug::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.UpdateStateRequest)
}

void UpdateStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateStateRequest_user_5frepo_5fservice_2eproto.base);
  user_ = nullptr;
}

UpdateStateRequest::~UpdateStateRequest() {
  // @@protoc_insertion_point(destructor:fixbug.UpdateStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UpdateStateRequest::ArenaDtor(void* object) {
  UpdateStateRequest* _this = reinterpret_cast< UpdateStateRequest* >(object);
  (void)_this;
}
void UpdateStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateStateRequest& UpdateStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateStateRequest_user_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.UpdateStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.UpdateStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.User user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.UpdateStateRequest)
  return target;
}

size_t UpdateStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.UpdateStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.User user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.UpdateStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.UpdateStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.UpdateStateRequest)
    MergeFrom(*source);
  }
}

void UpdateStateRequest::MergeFrom(const UpdateStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.UpdateStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::fixbug::User::MergeFrom(from._internal_user());
  }
}

void UpdateStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.UpdateStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStateRequest::CopyFrom(const UpdateStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.UpdateStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStateRequest::IsInitialized() const {
  return true;
}

void UpdateStateRequest::InternalSwap(UpdateStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateStateResponse::InitAsDefaultInstance() {
  ::fixbug::_UpdateStateResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::fixbug::ResultCode*>(
      ::fixbug::ResultCode::internal_default_instance());
}
class UpdateStateResponse::_Internal {
 public:
  static const ::fixbug::ResultCode& result(const UpdateStateResponse* msg);
};

const ::fixbug::ResultCode&
UpdateStateResponse::_Internal::result(const UpdateStateResponse* msg) {
  return *msg->result_;
}
void UpdateStateResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
UpdateStateResponse::UpdateStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.UpdateStateResponse)
}
UpdateStateResponse::UpdateStateResponse(const UpdateStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::fixbug::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.UpdateStateResponse)
}

void UpdateStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateStateResponse_user_5frepo_5fservice_2eproto.base);
  result_ = nullptr;
}

UpdateStateResponse::~UpdateStateResponse() {
  // @@protoc_insertion_point(destructor:fixbug.UpdateStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void UpdateStateResponse::ArenaDtor(void* object) {
  UpdateStateResponse* _this = reinterpret_cast< UpdateStateResponse* >(object);
  (void)_this;
}
void UpdateStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateStateResponse& UpdateStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateStateResponse_user_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.UpdateStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.UpdateStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.UpdateStateResponse)
  return target;
}

size_t UpdateStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.UpdateStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.UpdateStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.UpdateStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.UpdateStateResponse)
    MergeFrom(*source);
  }
}

void UpdateStateResponse::MergeFrom(const UpdateStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.UpdateStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::fixbug::ResultCode::MergeFrom(from._internal_result());
  }
}

void UpdateStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.UpdateStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStateResponse::CopyFrom(const UpdateStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.UpdateStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStateResponse::IsInitialized() const {
  return true;
}

void UpdateStateResponse::InternalSwap(UpdateStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetStateRequest::InitAsDefaultInstance() {
}
class ResetStateRequest::_Internal {
 public:
};

ResetStateRequest::ResetStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.ResetStateRequest)
}
ResetStateRequest::ResetStateRequest(const ResetStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:fixbug.ResetStateRequest)
}

void ResetStateRequest::SharedCtor() {
  userid_ = 0u;
}

ResetStateRequest::~ResetStateRequest() {
  // @@protoc_insertion_point(destructor:fixbug.ResetStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResetStateRequest::ArenaDtor(void* object) {
  ResetStateRequest* _this = reinterpret_cast< ResetStateRequest* >(object);
  (void)_this;
}
void ResetStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetStateRequest& ResetStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetStateRequest_user_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ResetStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.ResetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.ResetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.ResetStateRequest)
  return target;
}

size_t ResetStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.ResetStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.ResetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.ResetStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.ResetStateRequest)
    MergeFrom(*source);
  }
}

void ResetStateRequest::MergeFrom(const ResetStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.ResetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void ResetStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.ResetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetStateRequest::CopyFrom(const ResetStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.ResetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetStateRequest::IsInitialized() const {
  return true;
}

void ResetStateRequest::InternalSwap(ResetStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetStateResponse::InitAsDefaultInstance() {
  ::fixbug::_ResetStateResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::fixbug::ResultCode*>(
      ::fixbug::ResultCode::internal_default_instance());
}
class ResetStateResponse::_Internal {
 public:
  static const ::fixbug::ResultCode& result(const ResetStateResponse* msg);
};

const ::fixbug::ResultCode&
ResetStateResponse::_Internal::result(const ResetStateResponse* msg) {
  return *msg->result_;
}
void ResetStateResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
ResetStateResponse::ResetStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fixbug.ResetStateResponse)
}
ResetStateResponse::ResetStateResponse(const ResetStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::fixbug::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fixbug.ResetStateResponse)
}

void ResetStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetStateResponse_user_5frepo_5fservice_2eproto.base);
  result_ = nullptr;
}

ResetStateResponse::~ResetStateResponse() {
  // @@protoc_insertion_point(destructor:fixbug.ResetStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void ResetStateResponse::ArenaDtor(void* object) {
  ResetStateResponse* _this = reinterpret_cast< ResetStateResponse* >(object);
  (void)_this;
}
void ResetStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetStateResponse& ResetStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetStateResponse_user_5frepo_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ResetStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fixbug.ResetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fixbug.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fixbug.ResetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fixbug.ResetStateResponse)
  return target;
}

size_t ResetStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fixbug.ResetStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fixbug.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fixbug.ResetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fixbug.ResetStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fixbug.ResetStateResponse)
    MergeFrom(*source);
  }
}

void ResetStateResponse::MergeFrom(const ResetStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fixbug.ResetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::fixbug::ResultCode::MergeFrom(from._internal_result());
  }
}

void ResetStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fixbug.ResetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetStateResponse::CopyFrom(const ResetStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fixbug.ResetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetStateResponse::IsInitialized() const {
  return true;
}

void ResetStateResponse::InternalSwap(ResetStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

user_model::~user_model() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* user_model::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_user_5frepo_5fservice_2eproto);
  return file_level_service_descriptors_user_5frepo_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* user_model::GetDescriptor() {
  return descriptor();
}

void user_model::insert(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::InsertUserRequest*,
                         ::fixbug::InsertUserResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method insert() not implemented.");
  done->Run();
}

void user_model::query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::queryUserRequest*,
                         ::fixbug::queryUserResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method query() not implemented.");
  done->Run();
}

void user_model::updateState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::UpdateStateRequest*,
                         ::fixbug::UpdateStateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method updateState() not implemented.");
  done->Run();
}

void user_model::resetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::fixbug::ResetStateRequest*,
                         ::fixbug::ResetStateResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method resetState() not implemented.");
  done->Run();
}

void user_model::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_user_5frepo_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      insert(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::InsertUserRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::InsertUserResponse*>(
                 response),
             done);
      break;
    case 1:
      query(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::queryUserRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::queryUserResponse*>(
                 response),
             done);
      break;
    case 2:
      updateState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::UpdateStateRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::UpdateStateResponse*>(
                 response),
             done);
      break;
    case 3:
      resetState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::fixbug::ResetStateRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::fixbug::ResetStateResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& user_model::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::InsertUserRequest::default_instance();
    case 1:
      return ::fixbug::queryUserRequest::default_instance();
    case 2:
      return ::fixbug::UpdateStateRequest::default_instance();
    case 3:
      return ::fixbug::ResetStateRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& user_model::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::fixbug::InsertUserResponse::default_instance();
    case 1:
      return ::fixbug::queryUserResponse::default_instance();
    case 2:
      return ::fixbug::UpdateStateResponse::default_instance();
    case 3:
      return ::fixbug::ResetStateResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

user_model_Stub::user_model_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
user_model_Stub::user_model_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
user_model_Stub::~user_model_Stub() {
  if (owns_channel_) delete channel_;
}

void user_model_Stub::insert(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::InsertUserRequest* request,
                              ::fixbug::InsertUserResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void user_model_Stub::query(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::queryUserRequest* request,
                              ::fixbug::queryUserResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void user_model_Stub::updateState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::UpdateStateRequest* request,
                              ::fixbug::UpdateStateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void user_model_Stub::resetState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::fixbug::ResetStateRequest* request,
                              ::fixbug::ResetStateResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fixbug::InsertUserRequest* Arena::CreateMaybeMessage< ::fixbug::InsertUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::InsertUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::InsertUserResponse* Arena::CreateMaybeMessage< ::fixbug::InsertUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::InsertUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::queryUserRequest* Arena::CreateMaybeMessage< ::fixbug::queryUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::queryUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::queryUserResponse* Arena::CreateMaybeMessage< ::fixbug::queryUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::queryUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::UpdateStateRequest* Arena::CreateMaybeMessage< ::fixbug::UpdateStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::UpdateStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::UpdateStateResponse* Arena::CreateMaybeMessage< ::fixbug::UpdateStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::UpdateStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::ResetStateRequest* Arena::CreateMaybeMessage< ::fixbug::ResetStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::ResetStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fixbug::ResetStateResponse* Arena::CreateMaybeMessage< ::fixbug::ResetStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fixbug::ResetStateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
